#+TITLE: My config
* Custom functions
** Indentation
  #+BEGIN_SRC emacs-lisp
  (defun indentation (n)
    (setq-local js-indent-level n)
    (setq-local css-indent-offset n))
  #+END_SRC

** Set environment
   #+BEGIN_SRC emacs-lisp
   (defun set-environment ()
     (interactive)
     (message "2 space indentation")

     (setq indent-tabs-mode nil)

     (indentation 2))
   #+END_SRC

** Init
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'set-environment)
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC

** Term
   With thanks to [[https://unix.stackexchange.com/questions/182211/automaticaly-rename-new-buffer-in-term-mode][djangoliv on stackexchange]]
   #+BEGIN_SRC emacs-lisp
   (defun my-term (name)
     (interactive "sName: ")
     (command-execute 'term)
     (if (string= 'name "")
       (rename-buffer concat("Term:" name))
   )
   (global-set-key (kbd "C-x t") 'my-term)
   #+END_SRC

* Overrides
  .save files in the home dir
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves")))
  #+END_SRC

  Org mode image widths
  #+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width 300)
  #+END_SRC

  Prevent ctrl + z fucking things up
  #+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
  #+END_SRC
  
  Show matching parenthesis
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  #+END_SRC

  ctrl + d delete line
  #+BEGIN_SRC emacs-lisp
  ;;(global-set-key "\C-d" 'kill-whole-line)
  #+END_SRC

  truncate lines
  #+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  #+END_SRC

  ido
  #+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (ido-mode t)
  #+END_SRC

* Interface
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (global-hl-line-mode +1)
   (delete-selection-mode 1)
   #+END_SRC

** Theme
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     (load-theme 'doom-nord t))
   #+END_SRC

   Modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode))
   #+END_SRC

** Font
   #+BEGIN_SRC emacs-lisp
   ;;(add-to-list 'default-frame-alist '(font . "PragmataPro Mono Liga-10"))
   (set-face-attribute 'default nil :font "PragmataPro Mono Liga-10")
   (set-frame-font "PragmataPro Mono Liga-10" nil t)
   #+END_SRC
   
   Magic for ligatures
   From [[https://github.com/fabrizioschiavi/pragmatapro/blob/master/emacs_snippets/pragmatapro-prettify-symbols-v0.828.el]]
   #+BEGIN_SRC emacs-lisp
   (setq prettify-symbols-unprettify-at-point 'right-edge)

   (defconst pragmatapro-prettify-symbols-alist
     (mapcar (lambda (s)
	       `(,(car s)
		 .
		 ,(vconcat
		   (apply 'vconcat
			  (make-list
			   (- (length (car s)) 1)
			   (vector (decode-char 'ucs #X0020) '(Br . Bl))))
		   (vector (decode-char 'ucs (cadr s))))))
	     '(("[ERROR]"    #XE2C0)
	       ("[DEBUG]"    #XE2C1)
	       ("[INFO]"     #XE2C2)
	       ("[WARN]"     #XE2C3)
	       ("[WARNING]"  #XE2C4)
	       ("[ERR]"      #XE2C5)
	       ("[FATAL]"    #XE2C6)
	       ("[TRACE]"    #XE2C7)
	       ("[FIXME]"    #XE2C8)
	       ("[TODO]"     #XE2C9)
	       ("[BUG]"      #XE2CA)
	       ("[NOTE]"     #XE2CB)
	       ("[HACK]"     #XE2CC)
	       ("[MARK]"     #XE2CD)
	       ("# ERROR"    #XE2F0)
	       ("# DEBUG"    #XE2F1)
	       ("# INFO"     #XE2F2)
	       ("# WARN"     #XE2F3)
	       ("# WARNING"  #XE2F4)
	       ("# ERR"      #XE2F5)
	       ("# FATAL"    #XE2F6)
	       ("# TRACE"    #XE2F7)
	       ("# FIXME"    #XE2F8)
	       ("# TODO"     #XE2F9)
	       ("# BUG"      #XE2FA)
	       ("# NOTE"     #XE2FB)
	       ("# HACK"     #XE2FC)
	       ("# MARK"     #XE2FD)
	       ("// ERROR"   #XE2E0)
	       ("// DEBUG"   #XE2E1)
	       ("// INFO"    #XE2E2)
	       ("// WARN"    #XE2E3)
	       ("// WARNING" #XE2E4)
	       ("// ERR"     #XE2E5)
	       ("// FATAL"   #XE2E6)
	       ("// TRACE"   #XE2E7)
	       ("// FIXME"   #XE2E8)
	       ("// TODO"    #XE2E9)
	       ("// BUG"     #XE2EA)
	       ("// NOTE"    #XE2EB)
	       ("// HACK"    #XE2EC)
	       ("// MARK"    #XE2ED)
	       ("!!"         #XE900)
	       ("!="         #XE901)
	       ("!=="        #XE902)
	       ("!!!"        #XE903)
	       ("!≡"         #XE904)
	       ("!≡≡"        #XE905)
	       ("!>"         #XE906)
	       ("!=<"        #XE907)
	       ("#("         #XE920)
	       ("#_"         #XE921)
	       ("#{"         #XE922)
	       ("#?"         #XE923)
	       ("#>"         #XE924)
	       ("##"         #XE925)
	       ("#_("        #XE926)
	       ("%="         #XE930)
	       ("%>"         #XE931)
	       ("%>%"        #XE932)
	       ("%<%"        #XE933)
	       ("&%"         #XE940)
	       ("&&"         #XE941)
	       ("&*"         #XE942)
	       ("&+"         #XE943)
	       ("&-"         #XE944)
	       ("&/"         #XE945)
	       ("&="         #XE946)
	       ("&&&"        #XE947)
	       ("&>"         #XE948)
	       ("$>"         #XE955)
	       ("***"        #XE960)
	       ("*="         #XE961)
	       ("*/"         #XE962)
	       ("*>"         #XE963)
	       ("++"         #XE970)
	       ("+++"        #XE971)
	       ("+="         #XE972)
	       ("+>"         #XE973)
	       ("++="        #XE974)
	       ("--"         #XE980)
	       ("-<"         #XE981)
	       ("-<<"        #XE982)
	       ("-="         #XE983)
	       ("->"         #XE984)
	       ("->>"        #XE985)
	       ("---"        #XE986)
	       ("-->"        #XE987)
	       ("-+-"        #XE988)
	       ("-\\/"       #XE989)
	       ("-|>"        #XE98A)
	       ("-<|"        #XE98B)
	       (".."         #XE990)
	       ("..."        #XE991)
	       ("..<"        #XE992)
	       (".>"         #XE993)
	       (".~"         #XE994)
	       (".="         #XE995)
	       ("/*"         #XE9A0)
	       ("//"         #XE9A1)
	       ("/>"         #XE9A2)
	       ("/="         #XE9A3)
	       ("/=="        #XE9A4)
	       ("///"        #XE9A5)
	       ("/**"        #XE9A6)
	       (":::"        #XE9AF)
	       ("::"         #XE9B0)
	       (":="         #XE9B1)
	       (":≡"         #XE9B2)
	       (":>"         #XE9B3)
	       (":=>"        #XE9B4)
	       (":("         #XE9B5)
	       (":-("        #XE9B6)
	       (":)"         #XE9B7)
	       (":-)"        #XE9B8)
	       (":/"         #XE9B9)
	       (":\\"        #XE9BA)
	       (":3"         #XE9BB)
	       (":D"         #XE9BC)
	       (":P"         #XE9BD)
	       (":>:"        #XE9BE)
	       (":<:"        #XE9BF)
	       ("<$>"        #XE9C0)
	       ("<*"         #XE9C1)
	       ("<*>"        #XE9C2)
	       ("<+>"        #XE9C3)
	       ("<-"         #XE9C4)
	       ("<<"         #XE9C5)
	       ("<<<"        #XE9C6)
	       ("<<="        #XE9C7)
	       ("<="         #XE9C8)
	       ("<=>"        #XE9C9)
	       ("<>"         #XE9CA)
	       ("<|>"        #XE9CB)
	       ("<<-"        #XE9CC)
	       ("<|"         #XE9CD)
	       ("<=<"        #XE9CE)
	       ("<~"         #XE9CF)
	       ("<~~"        #XE9D0)
	       ("<<~"        #XE9D1)
	       ("<$"         #XE9D2)
	       ("<+"         #XE9D3)
	       ("<!>"        #XE9D4)
	       ("<@>"        #XE9D5)
	       ("<#>"        #XE9D6)
	       ("<%>"        #XE9D7)
	       ("<^>"        #XE9D8)
	       ("<&>"        #XE9D9)
	       ("<?>"        #XE9DA)
	       ("<.>"        #XE9DB)
	       ("</>"        #XE9DC)
	       ("<\\>"       #XE9DD)
	       ("<\">"       #XE9DE)
	       ("<:>"        #XE9DF)
	       ("<~>"        #XE9E0)
	       ("<**>"       #XE9E1)
	       ("<<^"        #XE9E2)
	       ("<!"         #XE9E3)
	       ("<@"         #XE9E4)
	       ("<#"         #XE9E5)
	       ("<%"         #XE9E6)
	       ("<^"         #XE9E7)
	       ("<&"         #XE9E8)
	       ("<?"         #XE9E9)
	       ("<."         #XE9EA)
	       ("</"         #XE9EB)
	       ("<\\"        #XE9EC)
	       ("<\""        #XE9ED)
	       ("<:"         #XE9EE)
	       ("<->"        #XE9EF)
	       ("<!--"       #XE9F0)
	       ("<--"        #XE9F1)
	       ("<~<"        #XE9F2)
	       ("<==>"       #XE9F3)
	       ("<|-"        #XE9F4)
	       ("<<|"        #XE9F5)
	       ("<-<"        #XE9F7)
	       ("<-->"       #XE9F8)
	       ("<<=="       #XE9F9)
	       ("<=="        #XE9FA)
	       ("=<<"        #XEA00)
	       ("=="         #XEA01)
	       ("==="        #XEA02)
	       ("==>"        #XEA03)
	       ("=>"         #XEA04)
	       ("=~"         #XEA05)
	       ("=>>"        #XEA06)
	       ("=/="        #XEA07)
	       ("=~="        #XEA08)
	       ("==>>"       #XEA09)
	       ("≡≡"         #XEA10)
	       ("≡≡≡"        #XEA11)
	       ("≡:≡"        #XEA12)
	       (">-"         #XEA20)
	       (">="         #XEA21)
	       (">>"         #XEA22)
	       (">>-"        #XEA23)
	       (">>="        #XEA24)
	       (">>>"        #XEA25)
	       (">=>"        #XEA26)
	       (">>^"        #XEA27)
	       (">>|"        #XEA28)
	       (">!="        #XEA29)
	       (">->"        #XEA2A)
	       ("??"         #XEA40)
	       ("?~"         #XEA41)
	       ("?="         #XEA42)
	       ("?>"         #XEA43)
	       ("???"        #XEA44)
	       ("?."         #XEA45)
	       ("^="         #XEA48)
	       ("^."         #XEA49)
	       ("^?"         #XEA4A)
	       ("^.."        #XEA4B)
	       ("^<<"        #XEA4C)
	       ("^>>"        #XEA4D)
	       ("^>"         #XEA4E)
	       ("\\\\"       #XEA50)
	       ("\\>"        #XEA51)
	       ("\\/-"       #XEA52)
	       ("@>"         #XEA57)
	       ("|="         #XEA60)
	       ("||"         #XEA61)
	       ("|>"         #XEA62)
	       ("|||"        #XEA63)
	       ("|+|"        #XEA64)
	       ("|->"        #XEA65)
	       ("|-->"       #XEA66)
	       ("|=>"        #XEA67)
	       ("|==>"       #XEA68)
	       ("|>-"        #XEA69)
	       ("|<<"        #XEA6A)
	       ("||>"        #XEA6B)
	       ("|>>"        #XEA6C)
	       ("|-"         #XEA6D)
	       ("||-"        #XEA6E)
	       ("~="         #XEA70)
	       ("~>"         #XEA71)
	       ("~~>"        #XEA72)
	       ("~>>"        #XEA73)
	       ("[["         #XEA80)
	       ("]]"         #XEA81)
	       ("\">"        #XEA90)
	       ("_|_"        #XEA97)
	       )))

   (defun add-pragmatapro-prettify-symbols-alist ()
     (setq prettify-symbols-alist pragmatapro-prettify-symbols-alist))

   ;; enable prettified symbols on comments
   (defun setup-compose-predicate ()
     (setq prettify-symbols-compose-predicate
	   (defun my-prettify-symbols-default-compose-p (start end _match)
	     "Same as `prettify-symbols-default-compose-p', except compose symbols in comments as well."
	     (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
				      '(?w ?_) '(?. ?\\)))
		    (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
				      '(?w ?_) '(?. ?\\))))
	       (not (or (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg)
			(memq (char-syntax (or (char-after end) ?\s)) syntaxes-end)
			(nth 3 (syntax-ppss))))))))

   ;; main hook fn, just add to text-mode/prog-mode
   (defun prettify-hook ()
     (message "Prettify-hook")
     (add-pragmatapro-prettify-symbols-alist)
     (setup-compose-predicate))

   (add-hook 'prog-mode-hook 'prettify-hook)
   (global-prettify-symbols-mode +1)
   #+END_SRC
* Packages
** Try
   Let's you try a package without installing it
   #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t)
   #+END_SRC
** Which Key
   Shows what keys are available after a couple of seconds
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC
** All The Icons
   Install icons font - manual step M-x all-the-icons-install-fonts
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :ensure t)
   #+END_SRC
** Helm
   Search and what-not
   #+BEGIN_SRC emacs-lisp
   (use-package helm
     :ensure t
     :config (helm-mode 1))
   #+END_SRC
** Elpy
   For Python
   #+BEGIN_SRC emacs-lisp
   (use-package elpy
     :ensure t
     :init
     (elpy-enable))
   #+END_SRC
** Treemacs
   File tree
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure t
     :bind
     (:map global-map
	([f8] . treemacs)
	("C-<f8>" . treemacs-select-window)
	)
     :config
       (progn
         (setq treemacs-is-never-other-window t)))
    #+END_SRC
** company
   Auto completion
   #+BEGIN_SRC emacs-lisp   
   (use-package company
     :ensure t
     :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
** company-quickhelp
   Documentation popup for company
   #+BEGIN_SRC emacs-lisp
   (use-package company-quickhelp
     :ensure t
     :config
       (company-quickhelp-mode))
   #+END_SRC
** Company Tern
   Tern backend for Company
   #+BEGIN_SRC emacs-lisp   
   (use-package company-tern
     :ensure t
     :init
       (add-to-list 'company-backends 'company-tern))
   #+END_SRC
** Projectile
   Manage projects
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
       (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC
** Helm Projectile
   Use helm with projectile
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile
     :ensure t
     :config (helm-projectile-on))
   #+END_SRC
** Treemacs Projectile
   Use Treemacs with Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs-projectile
     :ensure t)
   #+END_SRC
** Editor Config
   Use .editorconfig files
   #+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :ensure t
     :config
       (editorconfig-mode 1))
   #+END_SRC
** Centaur tabs
   Tabs like in other editors
   #+BEGIN_SRC emacs-lisp
   (use-package centaur-tabs
     :demand
     :config
       (setq centaur-tabs-set-bar 'over
         centaur-tabs-set-icons t
	 centaur-tabs-gray-out-icons 'buffer
	 centaur-tabs-height 24
	 centaur-tabs-set-modified-marker t
	 centaur-tabs-modified-marker "•")
       (centaur-tabs-headline-match)
       (centaur-tabs-mode t))
   #+END_SRC
** Dashboard
   A dashboard when you start Emacs
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :init
       (progn
         (setq dashboard-items '((recents . 5)
                                 (projects . 5)
				 (bookmarks . 5)))
	 (setq dashboard-startup-banner 'logo))
     :config
       (dashboard-setup-startup-hook))
   #+END_SRC
** Move text
   Move lines up and down
   #+BEGIN_SRC emacs-lisp
   (use-package move-text
     :ensure t
     :config (move-text-default-bindings))
   #+END_SRC
** Magit - DISABLED
   Git
   #+BEGIN_SRC emacs-lisp
;   (use-package magit
;     :ensure t)
   #+END_SRC

* Modes
** TODO term - this needs fixing
   #+BEGIN_SRC emacs_lisp
   (add-hook 'term-mode-hook (lambda()
       (setq-local global-h1-line-mode nil)))
   #+END_SRC

** rjsx
   For react
   #+BEGIN_SRC emacs-lisp
   (use-package rjsx-mode
     :ensure t
     :mode "\\.js\\'")
   #+END_SRC
** Flycheck
   For syntax checking
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init
       (global-flycheck-mode))
   #+END_SRC
** Blacken
   Black for Python
   #+BEGIN_SRC emacs-lisp
   (use-package blacken
     :ensure t
     :init
       (progn
         (setq blacken-line-length 79)
         (add-hook 'python-mode-hook 'blacken-mode)))
   #+END_SRC
** YAML
   For yaml
   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :ensure t
     :mode "\\.ya?ml\\'")
   #+END_SRC
** JSON
   For JSON
   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
     :ensure t
     :mode "\\.json\\'")
   #+END_SRC
** eslint
   For JS
   #+BEGIN_SRC emacs-lisp
   (use-package eslintd-fix
     :ensure t
     :init
       (add-hook 'rjsx-mode-hook 'eslintd-fix-mode))
   #+END_SRC
** flow
   #+BEGIN_SRC emacs-lisp
   (use-package flow-minor-mode
     :ensure t
     :config
     (add-hook 'rjsx-mode 'flow-minor-enable-automatically))
   #+END_SRC
** expand-region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :bind
       ("C-=" . er/expand-region)
       ("C--" . er/contract-region))
   #+END_SRC
* Org mode stuff
** settings
   #+BEGIN_SRC emacs-lisp
   (setq org-support-shift-select t)
   #+END_SRC

** org bullets
   For better bullets in org mode
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC



















